# Start from scratch image and add in a precompiled binary
# CGO_ENABLED=0 env  go build .
# docker build  --tag="opencoredata/ocdweb:0.9.4"  .
# docker run -d -p 9900:9900  opencoredata/ocdweb:0.9.4
FROM alpine
#FROM scratch

#RUN apk add py-urllib3 openssl certbot curl --no-cache \
RUN apk add openssl certbot curl --no-cache \
    --repository http://dl-3.alpinelinux.org/alpine/v3.7/community/ \
    --repository http://dl-3.alpinelinux.org/alpine/v3.7/main/ \
    && rm -rf /var/cache/apk/*

# Add in the static elements (could also mount these from local filesystem)
RUN mkdir /glcon
RUN mkdir /glcon/config
ADD ./cmd/glcon/glcon /glcon/

RUN mkdir /assets
#ADD ./assets/schemaorg-current-https.jsonld /assets/schemaorg-current-https.jsonld
#ADD ./assets/schemaorg-current-http.jsonld /assets/schemaorg-current-http.jsonld
RUN curl https://schema.org/version/latest/schemaorg-current-https.jsonld --output /assets/schemaorg-current-https.jsonld
RUN curl https://schema.org/version/latest/schemaorg-current-http.jsonld --output /assets/schemaorg-current-http.jsonld

RUN mkdir /configs

# ADD ../web/static  /static   # Replace with -v mounting the /web/static directory
# static is in the .dockerignore..  so an emptry dir is made unless static is removed
# from the ignore file... we mount the volume via compose from the local FS

# Add our binary
ENTRYPOINT ["/glcon/glcon"]
